From 29dab0586d2fd60f1511938d929f10fd1ee95b4c Mon Sep 17 00:00:00 2001
From: Charlie Helin <chelin@cloudera.com>
Date: Tue, 15 Sep 2015 16:12:57 -0400
Subject: [PATCH 0791/1023] KITCHEN-8412: Test stabilization work on the
 Hadoop repo

Change-Id: I389155efe2b1d2b5ae875b5339b5babf3bb02ec6
(cherry picked from commit f785c773a99a36fc03d46c1ccd5e7b1a350e44e4)
---
 cloudera/build.sh                |    6 +
 cloudera/excludes.txt            |   27 ++
 cloudera/lib.sh                  |  528 ++++++++++++++++++++++++++++++++++++++
 cloudera/post_commit_hook.sh     |    7 +
 cloudera/post_commit_hook.sh.bak |   29 ---
 cloudera/pre_commit_hook.sh      |   23 +-
 cloudera/test-all.sh             |    6 +
 cloudera/test-code-coverage.sh   |    6 +
 cloudera/test-flaky.sh           |    6 +
 cloudera/test-info.json          |   41 +++
 cloudera/test-stable.sh          |    6 +
 hadoop-project/pom.xml           |    5 +-
 12 files changed, 637 insertions(+), 53 deletions(-)
 create mode 100755 cloudera/build.sh
 create mode 100644 cloudera/excludes.txt
 create mode 100755 cloudera/lib.sh
 create mode 100755 cloudera/post_commit_hook.sh
 delete mode 100644 cloudera/post_commit_hook.sh.bak
 create mode 100755 cloudera/test-all.sh
 create mode 100755 cloudera/test-code-coverage.sh
 create mode 100755 cloudera/test-flaky.sh
 create mode 100644 cloudera/test-info.json
 create mode 100755 cloudera/test-stable.sh

diff --git a/cloudera/build.sh b/cloudera/build.sh
new file mode 100755
index 0000000..75e8dd7
--- /dev/null
+++ b/cloudera/build.sh
@@ -0,0 +1,6 @@
+#!/usr/bin/env bash
+
+DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
+
+. $DIR/lib.sh
+main $@
diff --git a/cloudera/excludes.txt b/cloudera/excludes.txt
new file mode 100644
index 0000000..6abf3cf
--- /dev/null
+++ b/cloudera/excludes.txt
@@ -0,0 +1,27 @@
+org/apache/hadoop/crypto/key/kms/server/TestKMS.java
+
+org/apache/hadoop/fs/viewfs/ViewFileSystemBaseTest.java
+org/apache/hadoop/fs/viewfs/ViewFsBaseTest.java
+
+org/apache/hadoop/ha/TestZKFailoverControllerStress.java
+
+org/apache/hadoop/mapred/TestJavaSerialization.java
+org/apache/hadoop/mapred/TestLocalJobSubmission.java
+
+org/apache/hadoop/mapreduce/TestLargeSort.java
+org/apache/hadoop/mapreduce/jobhistory/TestJobHistoryEventHandler.java
+
+org/apache/hadoop/security/TestShellBasedIdMapping.java
+org/apache/hadoop/security/ssl/TestReloadingX509TrustManager.java
+
+org/apache/hadoop/yarn/client/TestApplicationClientProtocolOnHA.java
+org/apache/hadoop/yarn/client/TestApplicationMasterServiceProtocolOnHA.java
+org/apache/hadoop/yarn/client/TestResourceTrackerOnHA.java
+
+org/apache/hadoop/yarn/server/applicationhistoryservice/TestApplicationHistoryServer.java
+org/apache/hadoop/yarn/server/nodemanager/containermanager/TestContainerManagerRecovery.java
+org/apache/hadoop/yarn/server/nodemanager/containermanager/logaggregation/TestLogAggregationService.java
+org/apache/hadoop/yarn/server/resourcemanager/TestContainerResourceUsage.java
+org/apache/hadoop/yarn/server/resourcemanager/metrics/TestSystemMetricsPublisher.java
+org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/TestContainerAllocation.java
+org/apache/hadoop/yarn/server/timeline/webapp/TestTimelineWebServices.java
diff --git a/cloudera/lib.sh b/cloudera/lib.sh
new file mode 100755
index 0000000..e2b63c0
--- /dev/null
+++ b/cloudera/lib.sh
@@ -0,0 +1,528 @@
+#!/bin/bash
+# This script ensures that the environment is properly setup for build and test of the
+# corresponding component. There are two differnet modes of operation
+# 1) Toolchain - TOOLCHAIN_HOME is defined and the environment will be derived using then
+#                environment exported from it
+# 2) Manual - On a developers machine, the developer is supposed to have setup the neccessary
+#             environment such as PATH referencing the desired JAVA, MAVEN, ANT..
+
+
+# Build - produces the necessary artifacts for testing. Takes the following
+# arguments
+#
+# - POM -- the POM to build
+# - MAVEN_FLAGS -- and Maven flags, properties or options to the build
+# - CODE_COVERAGE -- iff 'true' the produce code coverage artifacts
+# - NO_BUILD -- iff 'true' then skip this step
+function build() {
+  local _POM=$1
+  local _MAVEN_FLAGS=$2
+  local _CODE_COVERAGE=$3
+  local _NO_BUILD=$4
+
+  if [[ "$_NO_BUILD" != "true" ]]; then
+    echo
+    echo ----
+    echo Building: ${_POM} with "${_MAVEN_FLAGS}"
+    echo ----
+    echo
+    if [ "$_CODE_COVERAGE" == "true" ]; then
+      mvn -f ${_POM} -e install ${_MAVEN_FLAGS} -DskipTests -Pcloudera-clover
+    else
+      mvn -f ${_POM} -e install ${_MAVEN_FLAGS} -DskipTests
+    fi
+  else
+    echo
+    echo ----
+    echo Skipping build
+    echo ----
+    echo
+  fi
+}
+
+# Run all the tests. Takes the following arguments:
+#
+# - POM -- the POM to test
+# - MAVEN_FLAGS -- and Maven flags, properties or options to the test
+function runAllTests() {
+  local _POM=$1
+  local _MAVEN_FLAGS=$2
+
+  echo
+  echo ----
+  echo Running all tests in ${_POM} with ${_MAVEN_FLAGS}
+  echo ----
+  echo
+  mvn -Pcloudera-unittest -f ${_POM} -e findbugs:findbugs checkstyle:checkstyle test ${_MAVEN_FLAGS} -Dtest.excludes.file=
+}
+
+# Run all the tests with code coverage. Will also upload the results to http://sonar.jenkins.cloudera.com:9000.
+# Takes the following arguments:
+#
+# - POM -- the POM to test
+# - MAVEN_FLAGS -- and Maven flags, properties or options to the test
+# - EXCLUDES -- unstable tests that shouldn't be run
+function runCodeCoverage() {
+  local _POM=$1
+  local _MAVEN_FLAGS=$2
+  local _EXCLUDES=$3
+
+  echo
+  echo ----
+  echo Running code coverage tests in ${_POM} with ${_MAVEN_FLAGS}
+  echo ----
+  echo
+  mvn -f -Pcloudera-clover -Pcloudera-unittest ${_POM} -e findbugs:findbugs checkstyle:checkstyle test ${_MAVEN_FLAGS} -Dtest.excludes.file=${_EXCLUDES}
+
+  echo
+  echo ----
+  echo Publishing to sonar ${_POM} with ${_MAVEN_FLAGS}
+  echo ----
+  echo
+  mvn -Pcloudera-clover -f ${_POM} ${_MAVEN_FLAGS} sonar:sonar
+}
+
+# Run all the stable tests. Takes the following arguments:
+#
+# - POM -- the POM to test
+# - MAVEN_FLAGS -- and Maven flags, properties or options to the test
+# - EXCLUDES -- unstable tests that shouldn't be run
+function runStableTests() {
+  local _POM=$1
+  local _MAVEN_FLAGS=$2
+  local _EXCLUDES=$3
+
+  echo
+  echo ----
+  echo Running stable tests in ${_POM} with ${_MAVEN_FLAGS}
+  echo ----
+  echo
+  mvn -Pcloudera-unittest -f ${_POM} -e findbugs:findbugs checkstyle:checkstyle test ${_MAVEN_FLAGS} -Dtest.excludes.file=${_EXCLUDES}
+}
+
+# Setup the infra_tools and return the location of the infra_tools
+function provisionInfraTools() {
+  rm -r -f infra_tools
+  wget -q http://github.mtv.cloudera.com/QE/infra_tools/archive/master.zip
+  unzip -q -o master.zip
+  mv infra_tools-master infra_tools
+  rm master.zip
+
+  local _INFRA_TOOLS_LOCATION=`pwd`/infra_tools
+  ${_INFRA_TOOLS_LOCATION}/setupPyEnv.sh >> /dev/null
+
+  INFRA_TOOLS_LOCATION=${_INFRA_TOOLS_LOCATION}
+}
+
+# Combines xUnit formated files into a single result file. This allows a single
+# test case to be present multiple times.
+function mergeTestResults() {
+  if [[ -z ${INFRA_TOOLS_LOCATION} ]]; then
+    echo INFRA_TOOLS_LOCATION is not defined
+    exit 1
+  fi
+
+  local _INFRA_TOOLS_LOCATION=$1
+  local _CLOUDERA_DIR=$2
+  local _FILE_PATTERN=$3
+
+  # merge the results into test-result.json
+  ${INFRA_TOOLS_LOCATION}/xunit_merge.py --config ${_CLOUDERA_DIR}/test-info.json --test-dir `pwd` --file-pattern=${_FILE_PATTERN}
+}
+
+# Run all the flaky tests. At the end a test-result.json containing the results
+# for each test invocationTakes will be rendered. the following arguments:
+#
+# - POM -- the POM to test
+# - MAVEN_FLAGS -- and Maven flags, properties or options to the test
+# - INCLUDES -- unstable tests that should be run
+# - ITERATIONS -- the number of times to run the tests
+function runFlakyTests() {
+  local _POM=$1
+  local _MAVEN_FLAGS=$2
+  local _INCLUDES=$3
+  local _ITERATIONS=$4
+
+  provisionInfraTools
+  for i in $(eval echo "{1..$_ITERATIONS}")
+  do
+    echo
+    echo ----
+    echo Running excluded tests in ${_POM} iteration ${i}/${_ITERATIONS} with ${_MAVEN_FLAGS}
+    echo ----
+    echo
+
+    mvn -Pcloudera-unittest -f ${_POM} -e test ${_MAVEN_FLAGS} -Dtest.includes.file=${_INCLUDES} -Dtest.excludes.file=
+
+    # merge the results, with the prior run(s)
+    mergeTestResults ${INFRA_TOOLS_DIR} ${CLOUDERA_DIR} TEST.*\.xml
+  done
+}
+
+# Setup Java specific variables like Java options as well as source and target specifiers. Assumes that
+# JAVA7_HOME and optionally JAVA8_HOME is defined. Hence this should only be invoked when TOOLCHAIN_HOME
+# is set.
+#
+# Takes the the following arguments
+# JAVA_VERSION - the source version
+#
+# The outcome is that the following variables is defined
+# JAVA_HOME - The home directory of Java
+# JAVA_VERSION - the source Java version
+# MAVEN_OPTS - Java specific maven flags
+function setupJava() {
+  local _JAVA_VERSION=$1
+
+  case ${_JAVA_VERSION} in
+    1.7)
+      MAVEN_OPTS="-Xmx1g -Xms128m -XX:MaxPermSize=256m"
+      JAVA_OPTS="-Xmx4g -Xms1g -XX:MaxPermSize=256m"
+      if [[ -z $JAVA7_HOME ]]; then
+        echo JAVA7_HOME is not set
+        exit 1
+      fi
+      JAVA_HOME=${JAVA7_HOME}
+      JAVA_VERSION=1.7
+      ;;
+
+    1.8)
+      MAVEN_OPTS="-Xmx1g -Xms128m"
+      JAVA_OPTS="-Xmx4g -Xms1g"
+      if [[ -z $JAVA8_HOME ]]; then
+        echo JAVA8_HOME is not set
+        exit 1
+      fi
+      JAVA_HOME=${JAVA8_HOME}
+      JAVA_VERSION=1.8
+      ;;
+
+    *)
+      echo Unknown Java version ${_JAVA_VERSION}
+      exit 1
+      ;;
+  esac
+
+  echo -----------------------
+  echo Source Java ${JAVA_VERSION} version
+  echo -----------------------
+
+  PATH=${JAVA_HOME}/bin:$PATH
+
+  echo
+  echo ---- Java version -----
+  java -version
+  echo -----------------------
+}
+
+function ensureDirectory() {
+  local _DIR=$1
+  local _MESSAGE=$2
+
+  if [[ ! -d ${_DIR} ]]; then
+    echo ${_MESSAGE}
+    exit 1
+  fi
+}
+
+# Ensures that the specified command is configured on the PATH.
+# Takes the following arguments
+#
+# CMD - The command to check
+# MESSAGE - The message to write if the command is missing
+function ensureCommand() {
+  local _CMD=$1
+  local _MESSAGE=$2
+
+  which $_CMD >> /dev/null
+  local _EXTCODE=$?
+
+  if [[ $_EXTCODE -ne 0 ]]; then
+    echo $_MESSAGE
+    exit $_EXTCODE
+  fi
+}
+
+# Checks if a tool chain has been set. If set then the common environment will be setup.
+# The tool chain is identified by the environment variable TOOLCHAIN_HOME it is expected
+# to contain the necessary tools to produce the build. As a result PATH and other key
+# environment variables will be setup according to the tool chain.
+#
+# Takes two argumnets
+# JAVA_VERSION - the source Java compiler
+# TOOLCHAIN_HOME - (Optional) if not empty initialize using the toolchain environment
+function setupToolChain() {
+  local _JAVA_VERSION=$1
+  local _TOOLCHAIN_HOME=$2
+
+  if [[ ${_TOOLCHAIN_HOME} ]];  then
+    echo -----------------------
+    echo Using toolchain environment ${_TOOLCHAIN_HOME}
+    echo -----------------------
+    ensureDirectory ${_TOOLCHAIN_HOME} "TOOLCHAIN_HOME (${_TOOLCHAIN_HOME}) does not exist or is not a directory"
+
+    if [[ -z "${PROTOC5_HOME}" ]]; then
+      echo PROTOC5_HOME is not set
+      exit 1
+    fi
+    ensureDirectory ${PROTOC5_HOME} "PROTOC5_HOME (${PROTOC5_HOME}) does not exist or is not a directory"
+
+    if [[ -z ${ANT_HOME} ]]; then
+      echo ANT_HOME is not set
+      exit 1
+    fi
+    ensureDirectory ${ANT_HOME} "ANT_HOME (${ANT_HOME}) does not exist or is not a directory"
+
+    if [[ -z ${MAVEN3_HOME} ]]; then
+      echo MAVEN3_HOME is not set
+      exit 1
+    fi
+    ensureDirectory ${MAVEN3_HOME} "MAVEN3_HOME (${MAVEN3_HOME}) does not exist or is not a directory"
+
+    # append MAVEN and ANT to PATH
+    PATH=${MAVEN3_HOME}/bin:${ANT_HOME}/bin:${PATH}:${PROTOC5_HOME}/bin
+
+    setupJava ${_JAVA_VERSION}
+  fi
+  ensureCommand "javac" "Unable to execute javac (make sure that JAVA_HOME/PATH points to a JDK)"
+  ensureCommand "mvn" "Unable to execute mvn"
+  ensureCommand "protoc" "Unable to execute protoc"
+  ensureCommand "ant" "Unable to execute ant"
+
+  setupMavenFlags ${PROTOC5_HOME} ${_TOOLCHAIN_HOME}
+}
+
+# Setup the Java generated class files for specific VM version.
+# The supported versions include 1.7 & 1.8. If the target version
+# is successfull then TARGET_JAVA_VERSION will be setup correctly.
+#
+# Takes the following arguments:
+# TARGET-JAVA_VERSION - the target version
+function setupJavaTarget() {
+  local _TARGET_JAVA=$1
+
+  case ${_TARGET_JAVA} in
+    1.7|1.8)
+      echo
+      echo -----------------------
+      echo Target Java ${_TARGET_JAVA} version
+      echo -----------------------
+      TARGET_JAVA_VERSION=${_TARGET_JAVA}
+      ;;
+
+    *)
+      echo Unknown target Java version ${_TARGET_JAVA}
+      exit 1
+      ;;
+  esac
+}
+
+# After the environment variables been defined used to set MAVEN_FLAGS. Takes no arguments and should be called
+# during initialize() post calls to setup of toolchain
+#
+# Accepts the following arguments
+# PROTOBUF_HOME - (Optional) home of protobuf binaries
+# TOOLCHAIN_HOME - (Optional) location of Tool chain
+function setupMavenFlags() {
+  local _PROTOBUF_HOME=$1
+  local _TOOLCHAIN_HOME=$2
+
+  MAVEN_FLAGS="-Pnative -Drequire.fuse -Drequire.snappy -Dmaven.repo.local=$WORKSPACE/.m2 -DjavaVersion=$JAVA_VERSION -DtargetJavaVersion=$TARGET_JAVA_VERSION -Dmaven.test.failure.ignore=true -Dtest.fork.count=${TEST_FORK_COUNT} -Dtest.fork.reuse=${TEST_REUSE_FORKS}"
+
+  # setup of protobuf path, since Hadoop pom is using HADOOP_PROTOC_PATH it will be set here too, unless already
+  # defined
+  if [[ -z "${HADOOP_PROTOC_PATH}" && "${_PROTOBUF_HOME}" ]]; then
+    HADOOP_PROTOC_PATH=${_PROTOBUF_HOME}/bin/protoc
+    MAVEN_FLAGS="${MAVEN_FLAGS} -Dcdh.protobuf.path=${_PROTOBUF_HOME}/bin/protoc"
+  fi
+
+  if [[ "${_TOOLCHAIN_HOME}" ]]; then
+    MAVEN_FLAGS="${MAVEN_FLAGS} -Dcdh.toolchain.home=${_TOOLCHAIN_HOME}"
+  fi
+}
+
+function printUsage() {
+  echo Usage:
+  echo "lib.sh --java=<1.7(default)|1.8> --target-java=<1.7(default)|1.8> --pom=<pom path> --no-build=<true|false(default)>"
+  echo "       --toolchain-home=<toolchain directory> --protobuf-home=<protobuf directory> --iterations=<number>"
+  echo "       --test-fork-count=<number> --test-fork-reuse=<true(default)|false>"
+  echo
+  echo "This script is intended to be invoked by one of the proxy links: build, test-all, test-code-coverage, test-flaky"
+  echo "and test-stable"
+  echo
+  echo "Assume that this script is running using Jenkins and with toolkit defining the following environment variables"
+  echo "- ANT_HOME"
+  echo "- MAVEN3_HOME"
+  echo "- JAVA7_HOME"
+  echo "- JAVA8_HOME (optional only needed when using Java 8)"
+  echo
+  echo "If WORKSPACE is not defined by environment, the current working directory is assumed as the WORKSPACE."
+  echo "The result of parsing arguments is that the following envionment variables will be assigned"
+  echo "- POM -- the POM that will be used to drive build/testing"
+  echo "- JAVA -- the Java source version"
+  echo "- TARGET_JAVA -- the Java target byte code version"
+  echo "- JAVA_HOME -- the home directory of the choosen Java"
+  echo "- MAVEN_FLAGS -- the Maven flags, options and properties"
+  echo "- JAVA_OPTS -- Java flags"
+  echo "- MAVEN_OPTS -- Maven options"
+  echo
+  echo "Optionally the following variables could be set"
+  echo "- TEST_ITERATIONS -- the number of times flaky tests should be executed"
+  echo "- NO_BUILD -- iff set to true no pre-build will be performed"
+}
+
+# Assume that this script is running using Jenkins and with toolkit defining the following environment variables
+# - ANT_HOME
+# - MAVEN3_HOME
+# - JAVA7_HOME
+# - JAVA8_HOME
+#
+# If WORKSPACE is not defined by environment, the current working directory is assumed as the WORKSPACE.
+# The result of parsing arguments is that the following envionment variables will be assigned
+# - POM -- the POM that will be used to drive build/testing
+# - JAVA_VERSION -- the Java source version
+# - TARGET_JAVA -- the Java target byte code version
+# - JAVA_HOME -- the home directory of the choosen Java
+# - MAVEN_FLAGS -- the Maven flags, options and properties
+# - JAVA_OPTS -- Java flags
+# - MAVEN_OPTS -- Maven options
+#
+# Optionally the following variables could be set
+# - ITERATIONS -- the number of times flaky tests should be executed
+# - NO_BUILD -- iff set to true no pre-build will be performed
+function initialize() {
+
+  # Set default values
+  POM=pom.xml
+  TEST_FORK_COUNT=1
+  TEST_REUSE_FORKS=true
+  JAVA_VERSION=1.7
+  TARGET_JAVA=${JAVA_VERSION}
+  # end default values
+
+  for arg in "$@"
+  do
+  case ${arg} in
+    --java=*)
+      JAVA_VERSION="${arg#*=}"
+      shift
+      ;;
+
+    --target-java=*)
+      TARGET_JAVA="${arg#*=}"
+      shift
+      ;;
+
+    --pom=*|-p=*)
+      POM="${arg#*=}"
+      shift
+      ;;
+
+    --test-iterations=*|-i=*)
+      TEST_ITERATIONS="${arg#*=}"
+      shift
+      ;;
+
+    --no-build=*)
+      NO_BUILD="${arg#*=}"
+      ;;
+
+    --no-build)
+      export NO_BUILD=true
+      ;;
+
+    --test-fork-count=*)
+      TEST_FORK_COUNT="${arg#*=}"
+      shift
+      ;;
+
+    --test-reuse-forks=*|--test-reuse-fork=*)
+      TEST_REUSE_FORKS="${arg#*=}"
+      shift
+      ;;
+
+    --protobuf-home=*|--pb-home=*)
+      PROTOC5_HOME="${arg#*=}"
+      shift
+      ;;
+
+   --toolchain-home=*|--tc-home=*)
+      TOOLCHAIN_HOME="${arg#*=}"
+      shift
+      ;;
+
+    --help|-h)
+      printUsage
+      exit 0
+      ;;
+
+    --script=*)
+      SCRIPT="${arg#*=}"
+      shift
+      ;;
+
+    *)
+      echo Unknown flag ${arg}
+      ;;
+  esac
+  done
+
+  if [[ "${SCRIPT}" != "test-flaky.sh" && ${TEST_ITERATIONS} ]]; then
+    echo ${SCRIPT} cannot use --test-iterations, repetitive testing only works with test-flaky.sh
+    exit 1
+  fi
+
+  # WORKSPACE is normally set by Jenkins
+  if [[ -z "${WORKSPACE}" ]]; then
+    export WORKSPACE=`pwd`
+  fi
+
+  # always set the target java version
+  setupJavaTarget ${TARGET_JAVA}
+  # if toolchain is defined or specified use it to initialize the environment
+  setupToolChain ${JAVA_VERSION} ${TOOLCHAIN_HOME}
+  export PATH
+}
+
+################################### Main section ###################################
+
+function main() {
+  CLOUDERA_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
+  NAME=`basename $0`
+
+  # script is passed to ensure arguments are compatible
+  initialize $@ --script=${NAME}
+
+  pushd `pwd` >> /dev/null
+  cd ${CLOUDERA_DIR}/..
+
+  case ${NAME} in
+    build.sh)
+      build pom.xml "${MAVEN_FLAGS}" ${CODE_COVERAGE} false
+      ;;
+
+    test-all.sh)
+      build pom.xml "${MAVEN_FLAGS}" false ${NO_BUILD}
+      runAllTests ${POM} "${MAVEN_FLAGS}"
+      ;;
+
+    test-code-coverage.sh)
+      build pom.xml "${MAVEN_FLAGS}" true ${NO_BUILD}
+      runCodeCoverage ${POM} "${MAVEN_FLAGS}" "${CLOUDERA_DIR}/excludes.txt"
+      ;;
+
+    test-flaky.sh)
+      build pom.xml "${MAVEN_FLAGS}" false ${NO_BUILD}
+      runFlakyTests ${POM} "${MAVEN_FLAGS}" "${CLOUDERA_DIR}/excludes.txt" ${TEST_ITERATIONS}
+      ;;
+
+    test-stable.sh)
+      build pom.xml "${MAVEN_FLAGS}" false ${NO_BUILD}
+      runStableTests ${POM} "${MAVEN_FLAGS}" "${CLOUDERA_DIR}/excludes.txt"
+      ;;
+
+    *)
+      echo Do not know how to handle ${NAME}
+  esac
+
+  popd >> /dev/null
+}
\ No newline at end of file
diff --git a/cloudera/post_commit_hook.sh b/cloudera/post_commit_hook.sh
new file mode 100755
index 0000000..bdc9927
--- /dev/null
+++ b/cloudera/post_commit_hook.sh
@@ -0,0 +1,7 @@
+#!/bin/bash
+set -xe
+
+DIR="$( cd $( dirname $( dirname ${BASH_SOURCE[0]} ) ) && pwd )"
+cd $DIR
+
+$DIR/cloudera/build.sh
\ No newline at end of file
diff --git a/cloudera/post_commit_hook.sh.bak b/cloudera/post_commit_hook.sh.bak
deleted file mode 100644
index 1c64900..0000000
--- a/cloudera/post_commit_hook.sh.bak
+++ /dev/null
@@ -1,29 +0,0 @@
-#!/bin/bash
-set -xe
-
-SCRIPTS="jenkins-job-scripts"
-DIR="$( cd $( dirname $( dirname ${BASH_SOURCE[0]} ) ) && pwd )"
-cd $DIR
-
-if [[ -d $SCRIPTS ]]; then
-    echo "Cleaning up remnants from a previous run"
-    rm -rf $SCRIPTS
-fi
-
-# Clone the jenkins script repo
-git clone --depth 1 git://github.mtv.cloudera.com/CDH/$SCRIPTS.git $SCRIPTS || true
-
-# Fetch the right branch
-cd $SCRIPTS
-git fetch --depth 1 origin
-git checkout -f origin/master
-git ls-tree -r HEAD
-cd ..
-
-# Run the build and tests
-export CONF_NAME=CDH5-Hadoop-2.6.0
-./jenkins-job-scripts/run.sh
-
-if [[ -d $SCRIPTS ]]; then
-    rm -rf $SCRIPTS
-fi
diff --git a/cloudera/pre_commit_hook.sh b/cloudera/pre_commit_hook.sh
index f7048a8..e326a28 100755
--- a/cloudera/pre_commit_hook.sh
+++ b/cloudera/pre_commit_hook.sh
@@ -1,28 +1,7 @@
 #!/bin/bash
 set -xe
 
-SCRIPTS="jenkins-job-scripts"
 DIR="$( cd $( dirname $( dirname ${BASH_SOURCE[0]} ) ) && pwd )"
 cd $DIR
 
-if [[ -d $SCRIPTS ]]; then
-    echo "Cleaning up remnants from a previous run"
-    rm -rf $SCRIPTS
-fi
-
-# Clone the jenkins script repo
-git clone --depth 1 git://github.mtv.cloudera.com/CDH/$SCRIPTS.git $SCRIPTS || true
-
-# Fetch the right branch
-cd $SCRIPTS
-git fetch --depth 1 origin
-git checkout -f origin/master
-git ls-tree -r HEAD
-cd ..
-
-# Run the build and tests
-./jenkins-job-scripts/run_precommit.sh
-
-if [[ -d $SCRIPTS ]]; then
-    rm -rf $SCRIPTS
-fi
+$DIR/cloudera/build.sh
diff --git a/cloudera/test-all.sh b/cloudera/test-all.sh
new file mode 100755
index 0000000..75e8dd7
--- /dev/null
+++ b/cloudera/test-all.sh
@@ -0,0 +1,6 @@
+#!/usr/bin/env bash
+
+DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
+
+. $DIR/lib.sh
+main $@
diff --git a/cloudera/test-code-coverage.sh b/cloudera/test-code-coverage.sh
new file mode 100755
index 0000000..75e8dd7
--- /dev/null
+++ b/cloudera/test-code-coverage.sh
@@ -0,0 +1,6 @@
+#!/usr/bin/env bash
+
+DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
+
+. $DIR/lib.sh
+main $@
diff --git a/cloudera/test-flaky.sh b/cloudera/test-flaky.sh
new file mode 100755
index 0000000..75e8dd7
--- /dev/null
+++ b/cloudera/test-flaky.sh
@@ -0,0 +1,6 @@
+#!/usr/bin/env bash
+
+DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
+
+. $DIR/lib.sh
+main $@
diff --git a/cloudera/test-info.json b/cloudera/test-info.json
new file mode 100644
index 0000000..abd1470
--- /dev/null
+++ b/cloudera/test-info.json
@@ -0,0 +1,41 @@
+{
+  "test_info": {
+    "tests": [
+      {
+        "test_pattern": "org.hadoop.yarn.*",
+        "components": [
+          "Yarn"
+        ]
+      },
+      {
+        "test_pattern": "org.hadoop.hdfs.*",
+        "components": [
+          "HDFS"
+        ]
+      },
+      {
+        "test_pattern": "org.hadoop.mapred.*",
+        "components": [
+          "MapReduce"
+        ]
+      }
+    ],
+    "product": "CDH",
+    "release": "5.7.0",
+    "releases": [
+      "CDH5.7"
+    ],
+    "labels": [
+      "auto-jira",
+      "hadoop"
+    ],
+    "components": [
+      "Common"
+    ],
+    "jira-project": "CDH",
+    "test_framework": "surefire",
+    "email_threshold": 0.2,
+    "email_to": "chelin@cloudera.com",
+    "modified_threshold": 7
+  }
+}
diff --git a/cloudera/test-stable.sh b/cloudera/test-stable.sh
new file mode 100755
index 0000000..75e8dd7
--- /dev/null
+++ b/cloudera/test-stable.sh
@@ -0,0 +1,6 @@
+#!/usr/bin/env bash
+
+DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
+
+. $DIR/lib.sh
+main $@
diff --git a/hadoop-project/pom.xml b/hadoop-project/pom.xml
index b3b6146..a6eb654 100644
--- a/hadoop-project/pom.xml
+++ b/hadoop-project/pom.xml
@@ -67,8 +67,9 @@
 
     <!-- ProtocolBuffer version, used to verify the protoc version and -->
     <!-- define the protobuf JAR version                               -->
+    <cdh.protobuf.path>${env.HADOOP_PROTOC_PATH}</cdh.protobuf.path>
     <protobuf.version>${cdh.protobuf.version}</protobuf.version>
-    <protoc.path>${env.HADOOP_PROTOC_CDH5_PATH}</protoc.path>
+    <protoc.path>${cdh.protobuf.path}</protoc.path>
 
     <zookeeper.version>3.4.6</zookeeper.version>
     <curator.version>2.7.1</curator.version>
@@ -89,7 +90,7 @@
 
     <!-- Plugin versions and config -->
     <maven-surefire-plugin.argLine>-Xmx4096m -XX:MaxPermSize=768m -XX:+HeapDumpOnOutOfMemoryError</maven-surefire-plugin.argLine>
-    <maven-surefire-plugin.version>2.17</maven-surefire-plugin.version>
+    <maven-surefire-plugin.version>${cdh.surefire.version}</maven-surefire-plugin.version>
     <maven-surefire-report-plugin.version>${maven-surefire-plugin.version}</maven-surefire-report-plugin.version>
     <maven-failsafe-plugin.version>${maven-surefire-plugin.version}</maven-failsafe-plugin.version>
   </properties>
-- 
1.7.9.5

