From 8bf690742cb33a9781cf0ab8435090dba51e2332 Mon Sep 17 00:00:00 2001
From: Lei Xu <lei@apache.org>
Date: Mon, 26 Oct 2015 16:08:06 -0700
Subject: [PATCH 0945/1023] HDFS-9292. Make TestFileConcorruption independent
 to underlying FsDataset Implementation. (lei)

(cherry picked from commit 399ad009158cbc6aca179396d390fe770801420f)
(cherry picked from commit acbc8c14576c1aa46bb1eea04eaaa855f1063c6f)

Conflicts:
	hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/TestFileCorruption.java

Change-Id: I77f791b7a80afa7306cc944399375aa8f2bc759c
---
 .../org/apache/hadoop/hdfs/TestFileCorruption.java |   60 +++++++++-----------
 1 file changed, 26 insertions(+), 34 deletions(-)

diff --git a/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/TestFileCorruption.java b/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/TestFileCorruption.java
index 8001bfb..c1a7ebb 100644
--- a/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/TestFileCorruption.java
+++ b/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/TestFileCorruption.java
@@ -24,16 +24,16 @@
 
 import java.io.DataInputStream;
 import java.io.DataOutputStream;
-import java.io.File;
 import java.io.FileOutputStream;
 import java.util.ArrayList;
-import java.util.List;
+import java.util.Map;
 
 import org.apache.hadoop.conf.Configuration;
 import org.apache.hadoop.fs.ChecksumException;
 import org.apache.hadoop.fs.FileSystem;
 import org.apache.hadoop.fs.Path;
-import org.apache.hadoop.hdfs.protocol.Block;
+import org.apache.hadoop.hdfs.protocol.BlockListAsLongs;
+import org.apache.hadoop.hdfs.protocol.BlockListAsLongs.BlockReportReplica;
 import org.apache.hadoop.hdfs.protocol.DatanodeInfo;
 import org.apache.hadoop.hdfs.protocol.ExtendedBlock;
 import org.apache.hadoop.hdfs.server.datanode.DataNode;
@@ -41,6 +41,7 @@
 import org.apache.hadoop.hdfs.server.namenode.FSNamesystem;
 import org.apache.hadoop.hdfs.server.namenode.NameNode;
 import org.apache.hadoop.hdfs.server.protocol.DatanodeRegistration;
+import org.apache.hadoop.hdfs.server.protocol.DatanodeStorage;
 import org.apache.hadoop.test.GenericTestUtils;
 import org.apache.hadoop.test.PathUtils;
 import org.apache.log4j.Level;
@@ -70,18 +71,17 @@ public void testFileCorruption() throws Exception {
       FileSystem fs = cluster.getFileSystem();
       util.createFiles(fs, "/srcdat");
       // Now deliberately remove the blocks
-      File storageDir = cluster.getInstanceStorageDir(2, 0);
       String bpid = cluster.getNamesystem().getBlockPoolId();
-      File data_dir = MiniDFSCluster.getFinalizedDir(storageDir, bpid);
-      assertTrue("data directory does not exist", data_dir.exists());
-      File[] blocks = data_dir.listFiles();
-      assertTrue("Blocks do not exist in data-dir", (blocks != null) && (blocks.length > 0));
-      for (int idx = 0; idx < blocks.length; idx++) {
-        if (!blocks[idx].getName().startsWith(Block.BLOCK_FILE_PREFIX)) {
-          continue;
+      DataNode dn = cluster.getDataNodes().get(2);
+      Map<DatanodeStorage, BlockListAsLongs> blockReports =
+          dn.getFSDataset().getBlockReports(bpid);
+      assertTrue("Blocks do not exist on data-dir", !blockReports.isEmpty());
+      for (BlockListAsLongs report : blockReports.values()) {
+        for (BlockReportReplica brr : report) {
+          LOG.info("Deliberately removing block {}", brr.getBlockName());
+          cluster.getFsDatasetTestUtils(2).getMaterializedReplica(
+              new ExtendedBlock(bpid, brr)).deleteData();
         }
-        System.out.println("Deliberately removing file "+blocks[idx].getName());
-        assertTrue("Cannot remove file.", blocks[idx].delete());
       }
       assertTrue("Corrupted replicas not handled properly.",
                  util.checkFiles(fs, "/srcdat"));
@@ -107,7 +107,7 @@ public void testLocalFileCorruption() throws Exception {
     // Now attempt to read the file
     DataInputStream dis = fs.open(file, 512);
     try {
-      System.out.println("A ChecksumException is expected to be logged.");
+      LOG.info("A ChecksumException is expected to be logged.");
       dis.readByte();
     } catch (ChecksumException ignore) {
       //expect this exception but let any NPE get thrown
@@ -134,15 +134,7 @@ public void testArrayOutOfBoundsException() throws Exception {
       
       // get the block
       final String bpid = cluster.getNamesystem().getBlockPoolId();
-      File storageDir = cluster.getInstanceStorageDir(0, 0);
-      File dataDir = MiniDFSCluster.getFinalizedDir(storageDir, bpid);
-      assertTrue("Data directory does not exist", dataDir.exists());
-      ExtendedBlock blk = getBlock(bpid, dataDir);
-      if (blk == null) {
-        storageDir = cluster.getInstanceStorageDir(0, 1);
-        dataDir = MiniDFSCluster.getFinalizedDir(storageDir, bpid);
-        blk = getBlock(bpid, dataDir);
-      }
+      ExtendedBlock blk = getFirstBlock(cluster.getDataNodes().get(0), bpid);
       assertFalse("Data directory does not contain any blocks or there was an "
           + "IO error", blk==null);
 
@@ -170,20 +162,20 @@ public void testArrayOutOfBoundsException() throws Exception {
       //clean up
       fs.delete(FILE_PATH, false);
     } finally {
-      if (cluster != null) { cluster.shutdown(); }
+      if (cluster != null) {
+        cluster.shutdown();
+      }
     }
-    
   }
   
-  public static ExtendedBlock getBlock(String bpid, File dataDir) {
-    List<File> metadataFiles = MiniDFSCluster.getAllBlockMetadataFiles(dataDir);
-    if (metadataFiles == null || metadataFiles.isEmpty()) {
-      return null;
+  private static ExtendedBlock getFirstBlock(DataNode dn, String bpid) {
+    Map<DatanodeStorage, BlockListAsLongs> blockReports =
+        dn.getFSDataset().getBlockReports(bpid);
+    for (BlockListAsLongs blockLongs : blockReports.values()) {
+      for (BlockReportReplica block : blockLongs) {
+        return new ExtendedBlock(bpid, block);
+      }
     }
-    File metadataFile = metadataFiles.get(0);
-    File blockFile = Block.metaToBlockFile(metadataFile);
-    return new ExtendedBlock(bpid, Block.getBlockId(blockFile.getName()),
-        blockFile.length(), Block.getGenerationStamp(metadataFile.getName()));
+    return null;
   }
-
 }
-- 
1.7.9.5

