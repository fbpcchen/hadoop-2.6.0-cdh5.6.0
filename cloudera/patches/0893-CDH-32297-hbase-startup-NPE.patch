From 01c899bf83e25a2b24831a57e07c1fd740e9cdc9 Mon Sep 17 00:00:00 2001
From: stack <stack@cloudera.com>
Date: Thu, 1 Oct 2015 10:22:10 -0700
Subject: [PATCH 0893/1023] CDH-32297 hbase startup NPE Check if tracer is
 null before using it

Change-Id: I1ed9cadf52a31f34ad1c14721ddc1e6e8a621d59
---
 .../main/java/org/apache/hadoop/fs/FileSystem.java |    9 +-
 .../main/java/org/apache/hadoop/fs/Globber.java    |    9 +-
 .../org/apache/hadoop/hdfs/BlockReaderLocal.java   |    8 +-
 .../apache/hadoop/hdfs/BlockReaderLocalLegacy.java |    6 +-
 .../hadoop/hdfs/BlockStorageLocationUtil.java      |    8 +-
 .../java/org/apache/hadoop/hdfs/DFSClient.java     |  333 +++++++++++++-------
 .../hadoop/hdfs/DFSInotifyEventInputStream.java    |   21 +-
 .../org/apache/hadoop/hdfs/RemoteBlockReader.java  |    8 +-
 .../org/apache/hadoop/hdfs/RemoteBlockReader2.java |   16 +-
 .../hdfs/protocol/CacheDirectiveIterator.java      |    7 +-
 .../hadoop/hdfs/protocol/CachePoolIterator.java    |    7 +-
 .../hdfs/protocol/EncryptionZoneIterator.java      |    7 +-
 .../hdfs/protocol/datatransfer/Receiver.java       |    4 +-
 13 files changed, 294 insertions(+), 149 deletions(-)

diff --git a/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileSystem.java b/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileSystem.java
index a44b7ed..b58acfc 100644
--- a/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileSystem.java
+++ b/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileSystem.java
@@ -2628,8 +2628,11 @@ private static void loadFileSystems() {
   private static FileSystem createFileSystem(URI uri, Configuration conf
       ) throws IOException {
     Tracer tracer = FsTracer.get(conf);
-    TraceScope scope = tracer.newScope("FileSystem#createFileSystem");
-    scope.addKVAnnotation("scheme", uri.getScheme());
+    TraceScope scope = null;
+    if (tracer != null) {
+      scope = tracer.newScope("FileSystem#createFileSystem");
+      scope.addKVAnnotation("scheme", uri.getScheme());
+    }
     try {
       Class<?> clazz = getFileSystemClass(uri.getScheme(), conf);
       if (clazz == null) {
@@ -2640,7 +2643,7 @@ private static FileSystem createFileSystem(URI uri, Configuration conf
       fs.initialize(uri, conf);
       return fs;
     } finally {
-      scope.close();
+      if (scope != null) scope.close();
     }
   }
 
diff --git a/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/Globber.java b/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/Globber.java
index 7a01575..a0df751 100644
--- a/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/Globber.java
+++ b/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/Globber.java
@@ -142,12 +142,15 @@ private String authorityFromPath(Path path) throws IOException {
   }
 
   public FileStatus[] glob() throws IOException {
-    TraceScope scope = tracer.newScope("Globber#glob");
-    scope.addKVAnnotation("pattern", pathPattern.toUri().getPath());
+    TraceScope scope = null;
+    if (tracer != null) {
+      scope = tracer.newScope("Globber#glob");
+      scope.addKVAnnotation("pattern", pathPattern.toUri().getPath());
+    }
     try {
       return doGlob();
     } finally {
-      scope.close();
+      if (scope != null) scope.close();
     }
   }
 
diff --git a/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/BlockReaderLocal.java b/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/BlockReaderLocal.java
index e8b2e0d..106a446 100644
--- a/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/BlockReaderLocal.java
+++ b/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/BlockReaderLocal.java
@@ -330,8 +330,10 @@ private synchronized int drainDataBuf(ByteBuffer buf) {
    */
   private synchronized int fillBuffer(ByteBuffer buf, boolean canSkipChecksum)
       throws IOException {
-    TraceScope scope = tracer.newScope(
-        "BlockReaderLocal#fillBuffer(" + block.getBlockId() + ")");
+    TraceScope scope = null;
+    if (tracer != null) {
+      scope = tracer.newScope("BlockReaderLocal#fillBuffer(" + block.getBlockId() + ")");
+    }
     try {
       int total = 0;
       long startDataPos = dataPos;
@@ -376,7 +378,7 @@ private synchronized int fillBuffer(ByteBuffer buf, boolean canSkipChecksum)
       }
       return total;
     } finally {
-      scope.close();
+      if (scope != null) scope.close();
     }
   }
 
diff --git a/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/BlockReaderLocalLegacy.java b/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/BlockReaderLocalLegacy.java
index 24fa91d..8def390 100644
--- a/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/BlockReaderLocalLegacy.java
+++ b/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/BlockReaderLocalLegacy.java
@@ -366,8 +366,8 @@ private BlockReaderLocalLegacy(DFSClient.Conf conf, String hdfsfile,
    */
   private int fillBuffer(FileInputStream stream, ByteBuffer buf)
       throws IOException {
-    TraceScope scope = tracer.
-        newScope("BlockReaderLocalLegacy#fillBuffer(" + blockId + ")");
+    TraceScope scope = tracer == null? null:
+      tracer.newScope("BlockReaderLocalLegacy#fillBuffer(" + blockId + ")");
     try {
       int bytesRead = stream.getChannel().read(buf);
       if (bytesRead < 0) {
@@ -384,7 +384,7 @@ private int fillBuffer(FileInputStream stream, ByteBuffer buf)
       }
       return bytesRead;
     } finally {
-      scope.close();
+      if (scope != null) scope.close();
     }
   }
   
diff --git a/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/BlockStorageLocationUtil.java b/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/BlockStorageLocationUtil.java
index 8196850..ad9d8de 100644
--- a/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/BlockStorageLocationUtil.java
+++ b/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/BlockStorageLocationUtil.java
@@ -351,8 +351,10 @@ public HdfsBlocksMetadata call() throws Exception {
       HdfsBlocksMetadata metadata = null;
       // Create the RPC proxy and make the RPC
       ClientDatanodeProtocol cdp = null;
-      TraceScope scope =
-          tracer.newScope("getHdfsBlocksMetadata", parentSpanId);
+      TraceScope scope = null;
+      if (tracer != null) {
+        scope = tracer.newScope("getHdfsBlocksMetadata", parentSpanId);
+      }
       try {
         cdp = DFSUtil.createClientDatanodeProtocolProxy(datanode, configuration,
             timeout, connectToDnViaHostname);
@@ -361,7 +363,7 @@ public HdfsBlocksMetadata call() throws Exception {
         // Bubble this up to the caller, handle with the Future
         throw e;
       } finally {
-        scope.close();
+        if (scope != null) scope.close();
         if (cdp != null) {
           RPC.stopProxy(cdp);
         }
diff --git a/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSClient.java b/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSClient.java
index 594056e..c23fc47 100644
--- a/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSClient.java
+++ b/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSClient.java
@@ -1018,7 +1018,7 @@ public long getBlockSize(String f) throws IOException {
       LOG.warn("Problem getting block size", ie);
       throw ie;
     } finally {
-      scope.close();
+      if (scope != null) scope.close();
     }
   }
 
@@ -1053,7 +1053,10 @@ public String getCanonicalServiceName() {
   public Token<DelegationTokenIdentifier> getDelegationToken(Text renewer)
       throws IOException {
     assert dtService != null;
-    TraceScope scope = tracer.newScope("getDelegationToken");
+    TraceScope scope = null;
+    if (tracer != null) {
+      scope = tracer.newScope("getDelegationToken");
+    }
     try {
       Token<DelegationTokenIdentifier> token =
         namenode.getDelegationToken(renewer);
@@ -1065,7 +1068,7 @@ public String getCanonicalServiceName() {
       }
       return token;
     } finally {
-      scope.close();
+      if (scope != null) scope.close();
     }
   }
 
@@ -1241,7 +1244,7 @@ public LocatedBlocks getLocatedBlocks(String src, long start, long length)
     try {
       return callGetBlockLocations(namenode, src, start, length);
     } finally {
-      scope.close();
+      if (scope != null) scope.close();
     }
   }
 
@@ -1277,7 +1280,7 @@ boolean recoverLease(String src) throws IOException {
                                      AccessControlException.class,
                                      UnresolvedPathException.class);
     } finally {
-      scope.close();
+      if (scope != null) scope.close();
     }
   }
 
@@ -1305,7 +1308,7 @@ boolean recoverLease(String src) throws IOException {
       }
       return hdfsLocations;
     } finally {
-      scope.close();
+      if (scope != null) scope.close();
     }
   }
   
@@ -1360,21 +1363,24 @@ boolean recoverLease(String src) throws IOException {
     }
         
     // Make RPCs to the datanodes to get volume locations for its replicas
-    TraceScope scope =
-      tracer.newScope("getBlockStorageLocations");
+    TraceScope scope = null;
+    if (tracer != null) {
+      scope = tracer.newScope("getBlockStorageLocations");
+    }
     Map<DatanodeInfo, HdfsBlocksMetadata> metadatas;
     try {
       metadatas = BlockStorageLocationUtil.
           queryDatanodesForHdfsBlocksMetadata(conf, datanodeBlocks,
               getConf().getFileBlockStorageLocationsNumThreads,
               getConf().getFileBlockStorageLocationsTimeoutMs,
-              getConf().connectToDnViaHostname, tracer, scope.getSpanId());
+              getConf().connectToDnViaHostname, tracer,
+              scope == null? null: scope.getSpanId());
       if (LOG.isTraceEnabled()) {
         LOG.trace("metadata returned: "
             + Joiner.on("\n").withKeyValueSeparator("=").join(metadatas));
       }
     } finally {
-      scope.close();
+      if (scope != null) scope.close();
     }
     
     // Regroup the returned VolumeId metadata to again be grouped by
@@ -1394,7 +1400,10 @@ boolean recoverLease(String src) throws IOException {
    */
   private KeyVersion decryptEncryptedDataEncryptionKey(FileEncryptionInfo
       feInfo) throws IOException {
-    TraceScope scope = tracer.newScope("decryptEDEK");
+    TraceScope scope = null;
+    if (tracer != null) {
+      scope = tracer.newScope("decryptEDEK");
+    }
     try {
       KeyProvider provider = getKeyProvider();
       if (provider == null) {
@@ -1412,7 +1421,7 @@ private KeyVersion decryptEncryptedDataEncryptionKey(FileEncryptionInfo
         throw new IOException(e);
       }
     } finally {
-      scope.close();
+      if (scope != null) scope.close();
     }
   }
 
@@ -1554,7 +1563,7 @@ public DFSInputStream open(String src, int buffersize, boolean verifyChecksum)
     try {
       return new DFSInputStream(this, src, verifyChecksum);
     } finally {
-      scope.close();
+      if (scope != null) scope.close();
     }
   }
 
@@ -1803,7 +1812,7 @@ public void createSymlink(String target, String link, boolean createParent)
                                      UnresolvedPathException.class,
                                      SnapshotAccessControlException.class);
     } finally {
-      scope.close();
+      if (scope != null) scope.close();
     }
   }
 
@@ -1821,7 +1830,7 @@ public String getLinkTarget(String path) throws IOException {
       throw re.unwrapRemoteException(AccessControlException.class,
                                      FileNotFoundException.class);
     } finally {
-      scope.close();
+      if (scope != null) scope.close();
     }
   }
 
@@ -1891,7 +1900,7 @@ public boolean setReplication(String src, short replication)
                                      UnresolvedPathException.class,
                                      SnapshotAccessControlException.class);
     } finally {
-      scope.close();
+      if (scope != null) scope.close();
     }
   }
 
@@ -1913,7 +1922,7 @@ public void setStoragePolicy(String src, String policyName)
                                     UnresolvedPathException.class,
                                     SnapshotAccessControlException.class);
     } finally {
-      scope.close();
+      if (scope != null) scope.close();
     }
   }
 
@@ -1921,11 +1930,14 @@ public void setStoragePolicy(String src, String policyName)
    * @return All the existing storage policies
    */
   public BlockStoragePolicy[] getStoragePolicies() throws IOException {
-    TraceScope scope = tracer.newScope("getStoragePolicies");
+    TraceScope scope = null;
+    if (tracer != null) {
+      scope = tracer.newScope("getStoragePolicies");
+    }
     try {
       return namenode.getStoragePolicies();
     } finally {
-      scope.close();
+      if (scope != null) scope.close();
     }
   }
 
@@ -1947,7 +1959,7 @@ public boolean rename(String src, String dst) throws IOException {
                                      UnresolvedPathException.class,
                                      SnapshotAccessControlException.class);
     } finally {
-      scope.close();
+      if (scope != null) scope.close();
     }
   }
 
@@ -1957,7 +1969,10 @@ public boolean rename(String src, String dst) throws IOException {
    */
   public void concat(String trg, String [] srcs) throws IOException {
     checkOpen();
-    TraceScope scope = tracer.newScope("concat");
+    TraceScope scope = null;
+    if (tracer != null) {
+      scope = tracer.newScope("concat");
+    }
     try {
       namenode.concat(trg, srcs);
     } catch(RemoteException re) {
@@ -1965,7 +1980,7 @@ public void concat(String trg, String [] srcs) throws IOException {
                                      UnresolvedPathException.class,
                                      SnapshotAccessControlException.class);
     } finally {
-      scope.close();
+      if (scope != null) scope.close();
     }
   }
   /**
@@ -1989,7 +2004,7 @@ public void rename(String src, String dst, Options.Rename... options)
                                      UnresolvedPathException.class,
                                      SnapshotAccessControlException.class);
     } finally {
-      scope.close();
+      if (scope != null) scope.close();
     }
   }
   /**
@@ -2021,7 +2036,7 @@ public boolean delete(String src, boolean recursive) throws IOException {
                                      UnresolvedPathException.class,
                                      SnapshotAccessControlException.class);
     } finally {
-      scope.close();
+      if (scope != null) scope.close();
     }
   }
   
@@ -2061,7 +2076,7 @@ public DirectoryListing listPaths(String src,  byte[] startAfter,
                                      FileNotFoundException.class,
                                      UnresolvedPathException.class);
     } finally {
-      scope.close();
+      if (scope != null) scope.close();
     }
   }
 
@@ -2083,7 +2098,7 @@ public HdfsFileStatus getFileInfo(String src) throws IOException {
                                      FileNotFoundException.class,
                                      UnresolvedPathException.class);
     } finally {
-      scope.close();
+      if (scope != null) scope.close();
     }
   }
   
@@ -2101,7 +2116,7 @@ public boolean isFileClosed(String src) throws IOException{
                                      FileNotFoundException.class,
                                      UnresolvedPathException.class);
     } finally {
-      scope.close();
+      if (scope != null) scope.close();
     }
   }
   
@@ -2122,7 +2137,7 @@ public HdfsFileStatus getFileLinkInfo(String src) throws IOException {
       throw re.unwrapRemoteException(AccessControlException.class,
                                      UnresolvedPathException.class);
     } finally {
-      scope.close();
+      if (scope != null) scope.close();
     }
    }
   
@@ -2433,7 +2448,7 @@ public void setPermission(String src, FsPermission permission)
                                      UnresolvedPathException.class,
                                      SnapshotAccessControlException.class);
     } finally {
-      scope.close();
+      if (scope != null) scope.close();
     }
   }
 
@@ -2458,17 +2473,20 @@ public void setOwner(String src, String username, String groupname)
                                      UnresolvedPathException.class,
                                      SnapshotAccessControlException.class);                                   
     } finally {
-      scope.close();
+      if (scope != null) scope.close();
     }
   }
 
   private long[] callGetStats() throws IOException {
     checkOpen();
-    TraceScope scope = tracer.newScope("getStats");
+    TraceScope scope = null;
+    if (tracer != null) {
+      scope = tracer.newScope("getStats");
+    }
     try {
       return namenode.getStats();
     } finally {
-      scope.close();
+      if (scope != null) scope.close();
     }
   }
 
@@ -2527,30 +2545,35 @@ public CorruptFileBlocks listCorruptFileBlocks(String path,
     try {
       return namenode.listCorruptFileBlocks(path, cookie);
     } finally {
-      scope.close();
+      if (scope != null) scope.close();
     }
   }
 
   public DatanodeInfo[] datanodeReport(DatanodeReportType type)
       throws IOException {
     checkOpen();
-    TraceScope scope = tracer.newScope("datanodeReport");
+    TraceScope scope = null;
+    if (tracer != null) {
+      scope = tracer.newScope("datanodeReport");
+    }
     try {
       return namenode.getDatanodeReport(type);
     } finally {
-      scope.close();
+      if (scope != null) scope.close();
     }
   }
     
   public DatanodeStorageReport[] getDatanodeStorageReport(
       DatanodeReportType type) throws IOException {
     checkOpen();
-    TraceScope scope =
-        tracer.newScope("datanodeStorageReport");
+    TraceScope scope = null;
+    if (tracer != null)  {
+      scope = tracer.newScope("datanodeStorageReport");
+    }
     try {
       return namenode.getDatanodeStorageReport(type);
     } finally {
-      scope.close();
+      if (scope != null) scope.close();
     }
   }
 
@@ -2575,12 +2598,14 @@ public boolean setSafeMode(SafeModeAction action) throws IOException {
    * @see ClientProtocol#setSafeMode(HdfsConstants.SafeModeAction, boolean)
    */
   public boolean setSafeMode(SafeModeAction action, boolean isChecked) throws IOException{
-    TraceScope scope =
-        tracer.newScope("setSafeMode");
+    TraceScope scope = null;
+    if (tracer != null) {
+      scope = tracer.newScope("setSafeMode");
+    }
     try {
       return namenode.setSafeMode(action, isChecked);
     } finally {
-      scope.close();
+      if (scope != null) scope.close();
     }
   }
  
@@ -2595,13 +2620,16 @@ public boolean setSafeMode(SafeModeAction action, boolean isChecked) throws IOEx
   public String createSnapshot(String snapshotRoot, String snapshotName)
       throws IOException {
     checkOpen();
-    TraceScope scope = tracer.newScope("createSnapshot");
+    TraceScope scope = null;
+    if (tracer != null) {
+      scope = tracer.newScope("createSnapshot");
+    }
     try {
       return namenode.createSnapshot(snapshotRoot, snapshotName);
     } catch(RemoteException re) {
       throw re.unwrapRemoteException();
     } finally {
-      scope.close();
+      if (scope != null) scope.close();
     }
   }
   
@@ -2617,13 +2645,16 @@ public String createSnapshot(String snapshotRoot, String snapshotName)
   public void deleteSnapshot(String snapshotRoot, String snapshotName)
       throws IOException {
     checkOpen();
-    TraceScope scope = tracer.newScope("deleteSnapshot");
+    TraceScope scope = null;
+    if (tracer != null) {
+      scope = tracer.newScope("deleteSnapshot");
+    }
     try {
       namenode.deleteSnapshot(snapshotRoot, snapshotName);
     } catch(RemoteException re) {
       throw re.unwrapRemoteException();
     } finally {
-      scope.close();
+      if (scope != null) scope.close();
     }
   }
   
@@ -2638,13 +2669,16 @@ public void deleteSnapshot(String snapshotRoot, String snapshotName)
   public void renameSnapshot(String snapshotDir, String snapshotOldName,
       String snapshotNewName) throws IOException {
     checkOpen();
-    TraceScope scope = tracer.newScope("renameSnapshot");
+    TraceScope scope = null;
+    if (tracer != null) {
+      scope = tracer.newScope("renameSnapshot");
+    }
     try {
       namenode.renameSnapshot(snapshotDir, snapshotOldName, snapshotNewName);
     } catch(RemoteException re) {
       throw re.unwrapRemoteException();
     } finally {
-      scope.close();
+      if (scope != null) scope.close();
     }
   }
   
@@ -2657,13 +2691,16 @@ public void renameSnapshot(String snapshotDir, String snapshotOldName,
   public SnapshottableDirectoryStatus[] getSnapshottableDirListing()
       throws IOException {
     checkOpen();
-    TraceScope scope = tracer.newScope("getSnapshottableDirListing");
+    TraceScope scope = null;
+    if (tracer != null) {
+      scope = tracer.newScope("getSnapshottableDirListing");
+    }
     try {
       return namenode.getSnapshottableDirListing();
     } catch(RemoteException re) {
       throw re.unwrapRemoteException();
     } finally {
-      scope.close();
+      if (scope != null) scope.close();
     }
   }
 
@@ -2674,13 +2711,16 @@ public void renameSnapshot(String snapshotDir, String snapshotOldName,
    */
   public void allowSnapshot(String snapshotRoot) throws IOException {
     checkOpen();
-    TraceScope scope = tracer.newScope("allowSnapshot");
+    TraceScope scope = null;
+    if (tracer != null) {
+      scope = tracer.newScope("allowSnapshot");
+    }
     try {
       namenode.allowSnapshot(snapshotRoot);
     } catch (RemoteException re) {
       throw re.unwrapRemoteException();
     } finally {
-      scope.close();
+      if (scope != null) scope.close();
     }
   }
   
@@ -2691,13 +2731,16 @@ public void allowSnapshot(String snapshotRoot) throws IOException {
    */
   public void disallowSnapshot(String snapshotRoot) throws IOException {
     checkOpen();
-    TraceScope scope = tracer.newScope("disallowSnapshot");
+    TraceScope scope = null;
+    if (tracer != null) {
+      scope = tracer.newScope("disallowSnapshot");
+    }
     try {
       namenode.disallowSnapshot(snapshotRoot);
     } catch (RemoteException re) {
       throw re.unwrapRemoteException();
     } finally {
-      scope.close();
+      if (scope != null) scope.close();
     }
   }
   
@@ -2709,53 +2752,65 @@ public void disallowSnapshot(String snapshotRoot) throws IOException {
   public SnapshotDiffReport getSnapshotDiffReport(String snapshotDir,
       String fromSnapshot, String toSnapshot) throws IOException {
     checkOpen();
-    TraceScope scope = tracer.newScope("getSnapshotDiffReport");
+    TraceScope scope = null;
+    if (tracer != null) {
+      scope = tracer.newScope("getSnapshotDiffReport");
+    }
     try {
       return namenode.getSnapshotDiffReport(snapshotDir,
           fromSnapshot, toSnapshot);
     } catch(RemoteException re) {
       throw re.unwrapRemoteException();
     } finally {
-      scope.close();
+      if (scope != null) scope.close();
     }
   }
 
   public long addCacheDirective(
       CacheDirectiveInfo info, EnumSet<CacheFlag> flags) throws IOException {
     checkOpen();
-    TraceScope scope = tracer.newScope("addCacheDirective");
+    TraceScope scope = null;
+    if (tracer != null) {
+      scope = tracer.newScope("addCacheDirective");
+    }
     try {
       return namenode.addCacheDirective(info, flags);
     } catch (RemoteException re) {
       throw re.unwrapRemoteException();
     } finally {
-      scope.close();
+      if (scope != null) scope.close();
     }
   }
   
   public void modifyCacheDirective(
       CacheDirectiveInfo info, EnumSet<CacheFlag> flags) throws IOException {
     checkOpen();
-    TraceScope scope = tracer.newScope("modifyCacheDirective");
+    TraceScope scope = null;
+    if (tracer != null) {
+      scope = tracer.newScope("modifyCacheDirective");
+    }
     try {
       namenode.modifyCacheDirective(info, flags);
     } catch (RemoteException re) {
       throw re.unwrapRemoteException();
     } finally {
-      scope.close();
+      if (scope != null) scope.close();
     }
   }
 
   public void removeCacheDirective(long id)
       throws IOException {
     checkOpen();
-    TraceScope scope = tracer.newScope("removeCacheDirective");
+    TraceScope scope = null;
+    if (tracer != null) {
+      scope = tracer.newScope("removeCacheDirective");
+    }
     try {
       namenode.removeCacheDirective(id);
     } catch (RemoteException re) {
       throw re.unwrapRemoteException();
     } finally {
-      scope.close();
+      if (scope != null) scope.close();
     }
   }
   
@@ -2766,37 +2821,46 @@ public void removeCacheDirective(long id)
 
   public void addCachePool(CachePoolInfo info) throws IOException {
     checkOpen();
-    TraceScope scope = tracer.newScope("addCachePool");
+    TraceScope scope = null;
+    if (tracer != null) {
+      scope = tracer.newScope("addCachePool");
+    }
     try {
       namenode.addCachePool(info);
     } catch (RemoteException re) {
       throw re.unwrapRemoteException();
     } finally {
-      scope.close();
+      if (scope != null) scope.close();
     }
   }
 
   public void modifyCachePool(CachePoolInfo info) throws IOException {
     checkOpen();
-    TraceScope scope = tracer.newScope("modifyCachePool");
+    TraceScope scope = null;
+    if (tracer != null) {
+      scope = tracer.newScope("modifyCachePool");
+    }
     try {
       namenode.modifyCachePool(info);
     } catch (RemoteException re) {
       throw re.unwrapRemoteException();
     } finally {
-      scope.close();
+      if (scope != null) scope.close();
     }
   }
 
   public void removeCachePool(String poolName) throws IOException {
     checkOpen();
-    TraceScope scope = tracer.newScope("removeCachePool");
+    TraceScope scope = null;
+    if (tracer != null) {
+      scope = tracer.newScope("removeCachePool");
+    }
     try {
       namenode.removeCachePool(poolName);
     } catch (RemoteException re) {
       throw re.unwrapRemoteException();
     } finally {
-      scope.close();
+      if (scope != null) scope.close();
     }
   }
 
@@ -2810,13 +2874,16 @@ public void removeCachePool(String poolName) throws IOException {
    * @see ClientProtocol#saveNamespace()
    */
   void saveNamespace() throws AccessControlException, IOException {
-    TraceScope scope = tracer.newScope("saveNamespace");
+    TraceScope scope = null;
+    if (tracer != null) {
+      scope = tracer.newScope("saveNamespace");
+    }
     try {
       namenode.saveNamespace();
     } catch(RemoteException re) {
       throw re.unwrapRemoteException(AccessControlException.class);
     } finally {
-      scope.close();
+      if (scope != null) scope.close();
     }
   }
 
@@ -2827,13 +2894,16 @@ void saveNamespace() throws AccessControlException, IOException {
    * @see ClientProtocol#rollEdits()
    */
   long rollEdits() throws AccessControlException, IOException {
-    TraceScope scope = tracer.newScope("rollEdits");
+    TraceScope scope = null;
+    if (tracer != null) {
+      scope = tracer.newScope("rollEdits");
+    }
     try {
       return namenode.rollEdits();
     } catch(RemoteException re) {
       throw re.unwrapRemoteException(AccessControlException.class);
     } finally {
-      scope.close();
+      if (scope != null) scope.close();
     }
   }
 
@@ -2849,11 +2919,14 @@ ExtendedBlock getPreviousBlock(long fileId) {
    */
   boolean restoreFailedStorage(String arg)
       throws AccessControlException, IOException{
-    TraceScope scope = tracer.newScope("restoreFailedStorage");
+    TraceScope scope = null;
+    if (tracer != null) {
+      scope = tracer.newScope("restoreFailedStorage");
+    }
     try {
       return namenode.restoreFailedStorage(arg);
     } finally {
-      scope.close();
+      if (scope != null) scope.close();
     }
   }
 
@@ -2865,11 +2938,14 @@ boolean restoreFailedStorage(String arg)
    * @see ClientProtocol#refreshNodes()
    */
   public void refreshNodes() throws IOException {
-    TraceScope scope = tracer.newScope("refreshNodes");
+    TraceScope scope = null;
+    if (tracer != null) {
+      scope = tracer.newScope("refreshNodes");
+    }
     try {
       namenode.refreshNodes();
     } finally {
-      scope.close();
+      if (scope != null) scope.close();
     }
   }
 
@@ -2879,11 +2955,14 @@ public void refreshNodes() throws IOException {
    * @see ClientProtocol#metaSave(String)
    */
   public void metaSave(String pathname) throws IOException {
-    TraceScope scope = tracer.newScope("metaSave");
+    TraceScope scope = null;
+    if (tracer != null) {
+      scope = tracer.newScope("metaSave");
+    }
     try {
       namenode.metaSave(pathname);
     } finally {
-      scope.close();
+      if (scope != null) scope.close();
     }
   }
 
@@ -2896,11 +2975,14 @@ public void metaSave(String pathname) throws IOException {
    * @see ClientProtocol#setBalancerBandwidth(long)
    */
   public void setBalancerBandwidth(long bandwidth) throws IOException {
-    TraceScope scope = tracer.newScope("setBalancerBandwidth");
+    TraceScope scope = null;
+    if (tracer != null) {
+      scope = tracer.newScope("setBalancerBandwidth");
+    }
     try {
       namenode.setBalancerBandwidth(bandwidth);
     } finally {
-      scope.close();
+      if (scope != null) scope.close();
     }
   }
     
@@ -2908,20 +2990,26 @@ public void setBalancerBandwidth(long bandwidth) throws IOException {
    * @see ClientProtocol#finalizeUpgrade()
    */
   public void finalizeUpgrade() throws IOException {
-    TraceScope scope = tracer.newScope("finalizeUpgrade");
+    TraceScope scope = null;
+    if (tracer != null) {
+      scope = tracer.newScope("finalizeUpgrade");
+    }
     try {
       namenode.finalizeUpgrade();
     } finally {
-      scope.close();
+      if (scope != null) scope.close();
     }
   }
 
   RollingUpgradeInfo rollingUpgrade(RollingUpgradeAction action) throws IOException {
-    TraceScope scope = tracer.newScope("rollingUpgrade");
+    TraceScope scope = null;
+    if (tracer != null) {
+      scope = tracer.newScope("rollingUpgrade");
+    }
     try {
       return namenode.rollingUpgrade(action);
     } finally {
-      scope.close();
+      if (scope != null) scope.close();
     }
   }
 
@@ -2979,7 +3067,10 @@ public boolean primitiveMkdir(String src, FsPermission absPermission,
     if(LOG.isDebugEnabled()) {
       LOG.debug(src + ": masked=" + absPermission);
     }
-    TraceScope scope = tracer.newScope("mkdir");
+    TraceScope scope = null;
+    if (tracer != null) {
+      scope = tracer.newScope("mkdir");
+    }
     try {
       return namenode.mkdirs(src, absPermission, createParent);
     } catch(RemoteException re) {
@@ -2994,7 +3085,7 @@ public boolean primitiveMkdir(String src, FsPermission absPermission,
                                      UnresolvedPathException.class,
                                      SnapshotAccessControlException.class);
     } finally {
-      scope.close();
+      if (scope != null) scope.close();
     }
   }
   
@@ -3013,7 +3104,7 @@ ContentSummary getContentSummary(String src) throws IOException {
                                      FileNotFoundException.class,
                                      UnresolvedPathException.class);
     } finally {
-      scope.close();
+      if (scope != null) scope.close();
     }
   }
 
@@ -3044,7 +3135,7 @@ void setQuota(String src, long namespaceQuota, long diskspaceQuota)
                                      UnresolvedPathException.class,
                                      SnapshotAccessControlException.class);
     } finally {
-      scope.close();
+      if (scope != null) scope.close();
     }
   }
 
@@ -3064,7 +3155,7 @@ public void setTimes(String src, long mtime, long atime) throws IOException {
                                      UnresolvedPathException.class,
                                      SnapshotAccessControlException.class);
     } finally {
-      scope.close();
+      if (scope != null) scope.close();
     }
   }
 
@@ -3128,14 +3219,17 @@ public void modifyAclEntries(String src, List<AclEntry> aclSpec)
                                      SnapshotAccessControlException.class,
                                      UnresolvedPathException.class);
     } finally {
-      scope.close();
+      if (scope != null) scope.close();
     }
   }
 
   public void removeAclEntries(String src, List<AclEntry> aclSpec)
       throws IOException {
     checkOpen();
-    TraceScope scope = tracer.newScope("removeAclEntries");
+    TraceScope scope = null;
+    if (tracer != null) {
+      scope = tracer.newScope("removeAclEntries");
+    }
     try {
       namenode.removeAclEntries(src, aclSpec);
     } catch(RemoteException re) {
@@ -3147,13 +3241,16 @@ public void removeAclEntries(String src, List<AclEntry> aclSpec)
                                      SnapshotAccessControlException.class,
                                      UnresolvedPathException.class);
     } finally {
-      scope.close();
+      if (scope != null) scope.close();
     }
   }
 
   public void removeDefaultAcl(String src) throws IOException {
     checkOpen();
-    TraceScope scope = tracer.newScope("removeDefaultAcl");
+    TraceScope scope = null;
+    if (tracer != null) {
+      scope = tracer.newScope("removeDefaultAcl");
+    }
     try {
       namenode.removeDefaultAcl(src);
     } catch(RemoteException re) {
@@ -3165,13 +3262,16 @@ public void removeDefaultAcl(String src) throws IOException {
                                      SnapshotAccessControlException.class,
                                      UnresolvedPathException.class);
     } finally {
-      scope.close();
+      if (scope != null) scope.close();
     }
   }
 
   public void removeAcl(String src) throws IOException {
     checkOpen();
-    TraceScope scope = tracer.newScope("removeAcl");
+    TraceScope scope = null;
+    if (tracer != null) {
+      scope = tracer.newScope("removeAcl");
+    }
     try {
       namenode.removeAcl(src);
     } catch(RemoteException re) {
@@ -3183,13 +3283,16 @@ public void removeAcl(String src) throws IOException {
                                      SnapshotAccessControlException.class,
                                      UnresolvedPathException.class);
     } finally {
-      scope.close();
+      if (scope != null) scope.close();
     }
   }
 
   public void setAcl(String src, List<AclEntry> aclSpec) throws IOException {
     checkOpen();
-    TraceScope scope = tracer.newScope("setAcl");
+    TraceScope scope = null;
+    if (tracer != null) {
+      scope = tracer.newScope("setAcl");
+    }
     try {
       namenode.setAcl(src, aclSpec);
     } catch(RemoteException re) {
@@ -3201,7 +3304,7 @@ public void setAcl(String src, List<AclEntry> aclSpec) throws IOException {
                                      SnapshotAccessControlException.class,
                                      UnresolvedPathException.class);
     } finally {
-      scope.close();
+      if (scope != null) scope.close();
     }
   }
 
@@ -3216,7 +3319,7 @@ public AclStatus getAclStatus(String src) throws IOException {
                                      FileNotFoundException.class,
                                      UnresolvedPathException.class);
     } finally {
-      scope.close();
+      if (scope != null) scope.close();
     }
   }
   
@@ -3231,7 +3334,7 @@ public void createEncryptionZone(String src, String keyName)
                                      SafeModeException.class,
                                      UnresolvedPathException.class);
     } finally {
-      scope.close();
+      if (scope != null) scope.close();
     }
   }
 
@@ -3245,7 +3348,7 @@ public EncryptionZone getEZForPath(String src)
       throw re.unwrapRemoteException(AccessControlException.class,
                                      UnresolvedPathException.class);
     } finally {
-      scope.close();
+      if (scope != null) scope.close();
     }
   }
 
@@ -3269,7 +3372,7 @@ public void setXAttr(String src, String name, byte[] value,
                                      SnapshotAccessControlException.class,
                                      UnresolvedPathException.class);
     } finally {
-      scope.close();
+      if (scope != null) scope.close();
     }
   }
   
@@ -3285,7 +3388,7 @@ public void setXAttr(String src, String name, byte[] value,
                                      FileNotFoundException.class,
                                      UnresolvedPathException.class);
     } finally {
-      scope.close();
+      if (scope != null) scope.close();
     }
   }
   
@@ -3299,7 +3402,7 @@ public void setXAttr(String src, String name, byte[] value,
                                      FileNotFoundException.class,
                                      UnresolvedPathException.class);
     } finally {
-      scope.close();
+      if (scope != null) scope.close();
     }
   }
   
@@ -3315,7 +3418,7 @@ public void setXAttr(String src, String name, byte[] value,
                                      FileNotFoundException.class,
                                      UnresolvedPathException.class);
     } finally {
-      scope.close();
+      if (scope != null) scope.close();
     }
   }
   
@@ -3332,7 +3435,7 @@ public void setXAttr(String src, String name, byte[] value,
                                      FileNotFoundException.class,
                                      UnresolvedPathException.class);
     } finally {
-      scope.close();
+      if (scope != null) scope.close();
     }
   }
 
@@ -3349,7 +3452,7 @@ public void removeXAttr(String src, String name) throws IOException {
                                      SnapshotAccessControlException.class,
                                      UnresolvedPathException.class);
     } finally {
-      scope.close();
+      if (scope != null) scope.close();
     }
   }
 
@@ -3363,7 +3466,7 @@ public void checkAccess(String src, FsAction mode) throws IOException {
           FileNotFoundException.class,
           UnresolvedPathException.class);
     } finally {
-      scope.close();
+      if (scope != null) scope.close();
     }
   }
 
@@ -3495,20 +3598,26 @@ public SaslDataTransferClient getSaslDataTransferClient() {
   }
 
   TraceScope newPathTraceScope(String description, String path) {
-    TraceScope scope = tracer.newScope(description);
+    TraceScope scope = null;
+    if (tracer != null) {
+      scope = tracer.newScope(description);
+    }
     if (path != null) {
-      scope.addKVAnnotation("path", path);
+      if (scope != null) scope.addKVAnnotation("path", path);
     }
     return scope;
   }
 
   TraceScope newSrcDstTraceScope(String description, String src, String dst) {
-    TraceScope scope = tracer.newScope(description);
+    TraceScope scope = null;
+    if (tracer != null) {
+      scope = tracer.newScope(description);
+    }
     if (src != null) {
-      scope.addKVAnnotation("src", src);
+      if (scope != null) scope.addKVAnnotation("src", src);
     }
     if (dst != null) {
-      scope.addKVAnnotation("dst", dst);
+      if (scope != null) scope.addKVAnnotation("dst", dst);
     }
     return scope;
   }
diff --git a/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSInotifyEventInputStream.java b/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSInotifyEventInputStream.java
index b84a514..e1081af 100644
--- a/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSInotifyEventInputStream.java
+++ b/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSInotifyEventInputStream.java
@@ -94,7 +94,10 @@
    * The next available batch of events will be returned.
    */
   public EventBatch poll() throws IOException, MissingEventsException {
-    TraceScope scope = tracer.newScope("inotifyPoll");
+    TraceScope scope = null;
+    if (tracer != null) {
+      scope = tracer.newScope("inotifyPoll");
+    }
     try {
       // need to keep retrying until the NN sends us the latest committed txid
       if (lastReadTxid == -1) {
@@ -131,7 +134,7 @@ public EventBatch poll() throws IOException, MissingEventsException {
         return null;
       }
     } finally {
-      scope.close();
+      if (scope != null) scope.close();
     }
   }
 
@@ -175,7 +178,10 @@ public long getTxidsBehindEstimate() {
    */
   public EventBatch poll(long time, TimeUnit tu) throws IOException,
       InterruptedException, MissingEventsException {
-    TraceScope scope = tracer.newScope("inotifyPollWithTimeout");
+    TraceScope scope = null;
+    if (tracer != null) {
+      scope = tracer.newScope("inotifyPollWithTimeout");
+    } 
     EventBatch next = null;
     try {
       long initialTime = Time.monotonicNow();
@@ -196,7 +202,7 @@ public EventBatch poll(long time, TimeUnit tu) throws IOException,
         Thread.sleep(nextWait);
       }
     } finally {
-      scope.close();
+      if (scope != null) scope.close();
     }
     return next;
   }
@@ -212,7 +218,10 @@ public EventBatch poll(long time, TimeUnit tu) throws IOException,
    */
   public EventBatch take() throws IOException, InterruptedException,
       MissingEventsException {
-    TraceScope scope = tracer.newScope("inotifyTake");
+    TraceScope scope = null;
+    if (tracer != null) {
+      scope = tracer.newScope("inotifyTake");
+    }
     EventBatch next = null;
     try {
       int nextWaitMin = INITIAL_WAIT_MS;
@@ -226,7 +235,7 @@ public EventBatch take() throws IOException, InterruptedException,
         nextWaitMin = Math.min(60000, nextWaitMin * 2);
       }
     } finally {
-      scope.close();
+      if (scope != null) scope.close();
     }
 
     return next;
diff --git a/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/RemoteBlockReader.java b/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/RemoteBlockReader.java
index 71917aa..8a5c961 100644
--- a/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/RemoteBlockReader.java
+++ b/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/RemoteBlockReader.java
@@ -214,12 +214,14 @@ private void adjustChecksumBytes(int dataLen) {
   protected synchronized int readChunk(long pos, byte[] buf, int offset, 
                                        int len, byte[] checksumBuf) 
                                        throws IOException {
-    TraceScope scope = tracer.
-        newScope("RemoteBlockReader#readChunk(" + blockId + ")");
+    TraceScope scope = null;
+    if (tracer != null) {
+      scope = tracer.newScope("RemoteBlockReader#readChunk(" + blockId + ")");
+    }
     try {
       return readChunkImpl(pos, buf, offset, len, checksumBuf);
     } finally {
-      scope.close();
+      if (scope != null) scope.close();
     }
   }
 
diff --git a/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/RemoteBlockReader2.java b/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/RemoteBlockReader2.java
index 5ac5298..70986e7 100644
--- a/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/RemoteBlockReader2.java
+++ b/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/RemoteBlockReader2.java
@@ -148,12 +148,14 @@ public synchronized int read(byte[] buf, int off, int len)
     }
 
     if (curDataSlice == null || curDataSlice.remaining() == 0 && bytesNeededToFinish > 0) {
-      TraceScope scope = tracer.newScope(
-          "RemoteBlockReader2#readNextPacket(" + blockId + ")");
+      TraceScope scope = null;
+      if (tracer != null) {
+        scope = tracer.newScope("RemoteBlockReader2#readNextPacket(" + blockId + ")");
+      }
       try {
         readNextPacket();
       } finally {
-        scope.close();
+        if (scope != null) scope.close();
       }
     }
 
@@ -176,12 +178,14 @@ public synchronized int read(byte[] buf, int off, int len)
   @Override
   public int read(ByteBuffer buf) throws IOException {
     if (curDataSlice == null || curDataSlice.remaining() == 0 && bytesNeededToFinish > 0) {
-      TraceScope scope = tracer.newScope(
-          "RemoteBlockReader2#readNextPacket(" + blockId + ")");
+      TraceScope scope = null;
+      if (tracer != null) {
+        scope = tracer.newScope("RemoteBlockReader2#readNextPacket(" + blockId + ")");
+      }
       try {
         readNextPacket();
       } finally {
-        scope.close();
+        if (scope != null) scope.close();
       }
     }
     if (curDataSlice.remaining() == 0) {
diff --git a/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocol/CacheDirectiveIterator.java b/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocol/CacheDirectiveIterator.java
index f144a55..18c6fa0 100644
--- a/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocol/CacheDirectiveIterator.java
+++ b/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocol/CacheDirectiveIterator.java
@@ -93,7 +93,10 @@ public boolean hasMore() {
   public BatchedEntries<CacheDirectiveEntry> makeRequest(Long prevKey)
       throws IOException {
     BatchedEntries<CacheDirectiveEntry> entries = null;
-    TraceScope scope = tracer.newScope("listCacheDirectives");
+    TraceScope scope = null;
+    if (tracer != null) {
+      scope = tracer.newScope("listCacheDirectives");
+    }
     try {
       entries = namenode.listCacheDirectives(prevKey, filter);
     } catch (IOException e) {
@@ -116,7 +119,7 @@ public boolean hasMore() {
       }
       throw e;
     } finally {
-      scope.close();
+      if (scope != null) scope.close();
     }
     Preconditions.checkNotNull(entries);
     return entries;
diff --git a/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocol/CachePoolIterator.java b/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocol/CachePoolIterator.java
index 5e2bbf2..f592925 100644
--- a/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocol/CachePoolIterator.java
+++ b/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocol/CachePoolIterator.java
@@ -47,11 +47,14 @@ public CachePoolIterator(ClientProtocol namenode, Tracer tracer) {
   @Override
   public BatchedEntries<CachePoolEntry> makeRequest(String prevKey)
       throws IOException {
-    TraceScope scope = tracer.newScope("listCachePools");
+    TraceScope scope = null;
+    if (tracer != null) {
+      scope = tracer.newScope("listCachePools");
+    }
     try {
       return namenode.listCachePools(prevKey);
     } finally {
-      scope.close();
+      if (scope != null) scope.close();
     }
   }
 
diff --git a/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocol/EncryptionZoneIterator.java b/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocol/EncryptionZoneIterator.java
index a3cff82..acc96e4 100644
--- a/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocol/EncryptionZoneIterator.java
+++ b/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocol/EncryptionZoneIterator.java
@@ -47,11 +47,14 @@ public EncryptionZoneIterator(ClientProtocol namenode, Tracer tracer) {
   @Override
   public BatchedEntries<EncryptionZone> makeRequest(Long prevId)
       throws IOException {
-    TraceScope scope = tracer.newScope("listEncryptionZones");
+    TraceScope scope = null;
+    if (tracer != null) {
+      scope = tracer.newScope("listEncryptionZones");
+    }
     try {
       return namenode.listEncryptionZones(prevId);
     } finally {
-      scope.close();
+      if (scope != null) scope.close();
     }
   }
 
diff --git a/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocol/datatransfer/Receiver.java b/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocol/datatransfer/Receiver.java
index 7199e90..8585a7e 100644
--- a/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocol/datatransfer/Receiver.java
+++ b/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocol/datatransfer/Receiver.java
@@ -79,7 +79,9 @@ private TraceScope continueTraceSpan(DataTransferTraceInfoProto proto,
     TraceScope scope = null;
     SpanId spanId = fromProto(proto);
     if (spanId != null) {
-      scope = tracer.newScope(description, spanId);
+      if (tracer != null) {
+        scope = tracer.newScope(description, spanId);
+      }
     }
     return scope;
   }
-- 
1.7.9.5

