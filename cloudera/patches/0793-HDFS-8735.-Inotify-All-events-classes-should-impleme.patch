From 80ea18564d5dbc7acc6a23efa5d0e2e6ff4ce48c Mon Sep 17 00:00:00 2001
From: Colin Patrick Mccabe <cmccabe@cloudera.com>
Date: Thu, 17 Sep 2015 14:30:05 -0700
Subject: [PATCH 0793/1023] HDFS-8735. Inotify: All events classes should
 implement toString() API.  Contributed by
 Surendra Singh Lilhore.

(cherry picked from commit f8f60918230dd466ae8dda1fbc28878e19273232)
(cherry picked from commit 7bdd32ce3cae79a7b47c3d7df8f95a372804129a)

Change-Id: If2266f91398c7b7ecbea0cc2fedca29774768bf7
(cherry picked from commit 8f9dec11613afdf6a2bff7de0162765243ad915f)
---
 .../java/org/apache/hadoop/hdfs/inotify/Event.java |   87 ++++++++++++++++++++
 .../hdfs/TestDFSInotifyEventInputStream.java       |   24 ++++++
 2 files changed, 111 insertions(+)

diff --git a/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/inotify/Event.java b/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/inotify/Event.java
index 5ceff1b..f1c4d3f 100644
--- a/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/inotify/Event.java
+++ b/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/inotify/Event.java
@@ -51,6 +51,7 @@ public Event(EventType eventType) {
   /**
    * Sent when a file is closed after append or create.
    */
+  @InterfaceAudience.Public
   public static class CloseEvent extends Event {
     private String path;
     private long fileSize;
@@ -81,11 +82,20 @@ public long getFileSize() {
     public long getTimestamp() {
       return timestamp;
     }
+
+    @Override
+    @InterfaceStability.Unstable
+    public String toString() {
+      return "CloseEvent [path=" + path + ", fileSize=" + fileSize
+          + ", timestamp=" + timestamp + "]";
+    }
+
   }
 
   /**
    * Sent when a new file is created (including overwrite).
    */
+  @InterfaceAudience.Public
   public static class CreateEvent extends Event {
 
     public static enum INodeType {
@@ -232,6 +242,25 @@ public boolean getOverwrite() {
     public long getDefaultBlockSize() {
       return defaultBlockSize;
     }
+
+    @Override
+    @InterfaceStability.Unstable
+    public String toString() {
+      StringBuilder content = new StringBuilder();
+      content.append("CreateEvent [INodeType=" + iNodeType + ", path=" + path
+          + ", ctime=" + ctime + ", replication=" + replication
+          + ", ownerName=" + ownerName + ", groupName=" + groupName
+          + ", perms=" + perms + ", ");
+
+      if (symlinkTarget != null) {
+        content.append("symlinkTarget=" + symlinkTarget + ", ");
+      }
+
+      content.append("overwrite=" + overwrite + ", defaultBlockSize="
+          + defaultBlockSize + "]");
+      return content.toString();
+    }
+
   }
 
   /**
@@ -242,6 +271,7 @@ public long getDefaultBlockSize() {
    * metadataType of the MetadataUpdateEvent will be null or will have their default
    * values.
    */
+  @InterfaceAudience.Public
   public static class MetadataUpdateEvent extends Event {
 
     public static enum MetadataType {
@@ -400,11 +430,45 @@ public boolean isxAttrsRemoved() {
       return xAttrsRemoved;
     }
 
+    @Override
+    @InterfaceStability.Unstable
+    public String toString() {
+      StringBuilder content = new StringBuilder();
+      content.append("MetadataUpdateEvent [path=" + path + ", metadataType="
+          + metadataType);
+      switch (metadataType) {
+      case TIMES:
+        content.append(", mtime=" + mtime + ", atime=" + atime);
+        break;
+      case REPLICATION:
+        content.append(", replication=" + replication);
+        break;
+      case OWNER:
+        content.append(", ownerName=" + ownerName
+            + ", groupName=" + groupName);
+        break;
+      case PERMS:
+        content.append(", perms=" + perms);
+        break;
+      case ACLS:
+        content.append(", acls=" + acls);
+        break;
+      case XATTRS:
+        content.append(", xAttrs=" + xAttrs + ", xAttrsRemoved="
+            + xAttrsRemoved);
+        break;
+      default:
+        break;
+      }
+      content.append(']');
+      return content.toString();
+    }
   }
 
   /**
    * Sent when a file, directory, or symlink is renamed.
    */
+  @InterfaceAudience.Public
   public static class RenameEvent extends Event {
     private String srcPath;
     private String dstPath;
@@ -456,11 +520,20 @@ public String getDstPath() {
     public long getTimestamp() {
       return timestamp;
     }
+
+    @Override
+    @InterfaceStability.Unstable
+    public String toString() {
+      return "RenameEvent [srcPath=" + srcPath + ", dstPath=" + dstPath
+          + ", timestamp=" + timestamp + "]";
+    }
+
   }
 
   /**
    * Sent when an existing file is opened for append.
    */
+  @InterfaceAudience.Public
   public static class AppendEvent extends Event {
     private String path;
 
@@ -485,11 +558,19 @@ private AppendEvent(Builder b) {
     public String getPath() {
       return path;
     }
+
+    @Override
+    @InterfaceStability.Unstable
+    public String toString() {
+      return "AppendEvent [path=" + path + ", newBlock=" + newBlock + "]";
+    }
+
   }
 
   /**
    * Sent when a file, directory, or symlink is deleted.
    */
+  @InterfaceAudience.Public
   public static class UnlinkEvent extends Event {
     private String path;
     private long timestamp;
@@ -529,5 +610,11 @@ public String getPath() {
     public long getTimestamp() {
       return timestamp;
     }
+
+    @Override
+    @InterfaceStability.Unstable
+    public String toString() {
+      return "UnlinkEvent [path=" + path + ", timestamp=" + timestamp + "]";
+    }
   }
 }
diff --git a/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/TestDFSInotifyEventInputStream.java b/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/TestDFSInotifyEventInputStream.java
index 3ac85fb..0760256 100644
--- a/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/TestDFSInotifyEventInputStream.java
+++ b/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/TestDFSInotifyEventInputStream.java
@@ -146,6 +146,8 @@ public void testBasic() throws IOException, URISyntaxException,
       Assert.assertEquals("/file4", re.getDstPath());
       Assert.assertEquals("/file", re.getSrcPath());
       Assert.assertTrue(re.getTimestamp() > 0);
+      LOG.info(re.toString());
+      Assert.assertTrue(re.toString().startsWith("RenameEvent [srcPath="));
 
       long eventsBehind = eis.getTxidsBehindEstimate();
 
@@ -158,6 +160,7 @@ public void testBasic() throws IOException, URISyntaxException,
       Assert.assertTrue(re2.getDstPath().equals("/file2"));
       Assert.assertTrue(re2.getSrcPath().equals("/file4"));
       Assert.assertTrue(re.getTimestamp() > 0);
+      LOG.info(re2.toString());
 
       // AddOp with overwrite
       batch = waitForNextEvents(eis);
@@ -172,6 +175,8 @@ public void testBasic() throws IOException, URISyntaxException,
       Assert.assertTrue(ce.getSymlinkTarget() == null);
       Assert.assertTrue(ce.getOverwrite());
       Assert.assertEquals(BLOCK_SIZE, ce.getDefaultBlockSize());
+      LOG.info(ce.toString());
+      Assert.assertTrue(ce.toString().startsWith("CreateEvent [INodeType="));
 
       // CloseOp
       batch = waitForNextEvents(eis);
@@ -182,6 +187,8 @@ public void testBasic() throws IOException, URISyntaxException,
       Assert.assertTrue(ce2.getPath().equals("/file2"));
       Assert.assertTrue(ce2.getFileSize() > 0);
       Assert.assertTrue(ce2.getTimestamp() > 0);
+      LOG.info(ce2.toString());
+      Assert.assertTrue(ce2.toString().startsWith("CloseEvent [path="));
 
       // AddOp
       batch = waitForNextEvents(eis);
@@ -190,6 +197,8 @@ public void testBasic() throws IOException, URISyntaxException,
       Assert.assertTrue(batch.getEvents()[0].getEventType() == Event.EventType.APPEND);
       Event.AppendEvent append2 = (Event.AppendEvent)batch.getEvents()[0];
       Assert.assertEquals("/file2", append2.getPath());
+      LOG.info(append2.toString());
+      Assert.assertTrue(append2.toString().startsWith("AppendEvent [path="));
 
       // CloseOp
       batch = waitForNextEvents(eis);
@@ -207,6 +216,8 @@ public void testBasic() throws IOException, URISyntaxException,
       Assert.assertTrue(mue.getPath().equals("/file2"));
       Assert.assertTrue(mue.getMetadataType() ==
           Event.MetadataUpdateEvent.MetadataType.TIMES);
+      LOG.info(mue.toString());
+      Assert.assertTrue(mue.toString().startsWith("MetadataUpdateEvent [path="));
 
       // SetReplicationOp
       batch = waitForNextEvents(eis);
@@ -218,6 +229,7 @@ public void testBasic() throws IOException, URISyntaxException,
       Assert.assertTrue(mue2.getMetadataType() ==
           Event.MetadataUpdateEvent.MetadataType.REPLICATION);
       Assert.assertTrue(mue2.getReplication() == 1);
+      LOG.info(mue2.toString());
 
       // ConcatDeleteOp
       batch = waitForNextEvents(eis);
@@ -229,6 +241,8 @@ public void testBasic() throws IOException, URISyntaxException,
       Event.UnlinkEvent ue2 = (Event.UnlinkEvent) batch.getEvents()[1];
       Assert.assertTrue(ue2.getPath().equals("/file3"));
       Assert.assertTrue(ue2.getTimestamp() > 0);
+      LOG.info(ue2.toString());
+      Assert.assertTrue(ue2.toString().startsWith("UnlinkEvent [path="));
       Assert.assertTrue(batch.getEvents()[2].getEventType() == Event.EventType.CLOSE);
       Event.CloseEvent ce3 = (Event.CloseEvent) batch.getEvents()[2];
       Assert.assertTrue(ce3.getPath().equals("/file2"));
@@ -242,6 +256,7 @@ public void testBasic() throws IOException, URISyntaxException,
       Event.UnlinkEvent ue = (Event.UnlinkEvent) batch.getEvents()[0];
       Assert.assertTrue(ue.getPath().equals("/file2"));
       Assert.assertTrue(ue.getTimestamp() > 0);
+      LOG.info(ue.toString());
 
       // MkdirOp
       batch = waitForNextEvents(eis);
@@ -255,6 +270,7 @@ public void testBasic() throws IOException, URISyntaxException,
       Assert.assertTrue(ce4.getCtime() > 0);
       Assert.assertTrue(ce4.getReplication() == 0);
       Assert.assertTrue(ce4.getSymlinkTarget() == null);
+      LOG.info(ce4.toString());
 
       // SetPermissionsOp
       batch = waitForNextEvents(eis);
@@ -266,6 +282,7 @@ public void testBasic() throws IOException, URISyntaxException,
       Assert.assertTrue(mue3.getMetadataType() ==
           Event.MetadataUpdateEvent.MetadataType.PERMS);
       Assert.assertTrue(mue3.getPerms().toString().contains("rw-rw-rw-"));
+      LOG.info(mue3.toString());
 
       // SetOwnerOp
       batch = waitForNextEvents(eis);
@@ -278,6 +295,7 @@ public void testBasic() throws IOException, URISyntaxException,
           Event.MetadataUpdateEvent.MetadataType.OWNER);
       Assert.assertTrue(mue4.getOwnerName().equals("username"));
       Assert.assertTrue(mue4.getGroupName().equals("groupname"));
+      LOG.info(mue4.toString());
 
       // SymlinkOp
       batch = waitForNextEvents(eis);
@@ -291,6 +309,7 @@ public void testBasic() throws IOException, URISyntaxException,
       Assert.assertTrue(ce5.getCtime() > 0);
       Assert.assertTrue(ce5.getReplication() == 0);
       Assert.assertTrue(ce5.getSymlinkTarget().equals("/dir"));
+      LOG.info(ce5.toString());
 
       // SetXAttrOp
       batch = waitForNextEvents(eis);
@@ -304,6 +323,7 @@ public void testBasic() throws IOException, URISyntaxException,
       Assert.assertTrue(mue5.getxAttrs().size() == 1);
       Assert.assertTrue(mue5.getxAttrs().get(0).getName().contains("field"));
       Assert.assertTrue(!mue5.isxAttrsRemoved());
+      LOG.info(mue5.toString());
 
       // RemoveXAttrOp
       batch = waitForNextEvents(eis);
@@ -317,6 +337,7 @@ public void testBasic() throws IOException, URISyntaxException,
       Assert.assertTrue(mue6.getxAttrs().size() == 1);
       Assert.assertTrue(mue6.getxAttrs().get(0).getName().contains("field"));
       Assert.assertTrue(mue6.isxAttrsRemoved());
+      LOG.info(mue6.toString());
 
       // SetAclOp (1)
       batch = waitForNextEvents(eis);
@@ -329,6 +350,7 @@ public void testBasic() throws IOException, URISyntaxException,
           Event.MetadataUpdateEvent.MetadataType.ACLS);
       Assert.assertTrue(mue7.getAcls().contains(
           AclEntry.parseAclEntry("user::rwx", true)));
+      LOG.info(mue7.toString());
 
       // SetAclOp (2)
       batch = waitForNextEvents(eis);
@@ -340,6 +362,7 @@ public void testBasic() throws IOException, URISyntaxException,
       Assert.assertTrue(mue8.getMetadataType() ==
           Event.MetadataUpdateEvent.MetadataType.ACLS);
       Assert.assertTrue(mue8.getAcls() == null);
+      LOG.info(mue8.toString());
 
       // RenameOp (2)
       batch = waitForNextEvents(eis);
@@ -350,6 +373,7 @@ public void testBasic() throws IOException, URISyntaxException,
       Assert.assertTrue(re3.getDstPath().equals("/dir/file5"));
       Assert.assertTrue(re3.getSrcPath().equals("/file5"));
       Assert.assertTrue(re.getTimestamp() > 0);
+      LOG.info(re3.toString());
 
       // Returns null when there are no further events
       Assert.assertTrue(eis.poll() == null);
-- 
1.7.9.5

